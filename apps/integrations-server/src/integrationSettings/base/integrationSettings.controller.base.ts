/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IntegrationSettingsService } from "../integrationSettings.service";
import { IntegrationSettingsCreateInput } from "./IntegrationSettingsCreateInput";
import { IntegrationSettings } from "./IntegrationSettings";
import { IntegrationSettingsFindManyArgs } from "./IntegrationSettingsFindManyArgs";
import { IntegrationSettingsWhereUniqueInput } from "./IntegrationSettingsWhereUniqueInput";
import { IntegrationSettingsUpdateInput } from "./IntegrationSettingsUpdateInput";

export class IntegrationSettingsControllerBase {
  constructor(protected readonly service: IntegrationSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IntegrationSettings })
  async createIntegrationSettings(
    @common.Body() data: IntegrationSettingsCreateInput
  ): Promise<IntegrationSettings> {
    return await this.service.createIntegrationSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IntegrationSettings] })
  @ApiNestedQuery(IntegrationSettingsFindManyArgs)
  async integrationSettingsItems(
    @common.Req() request: Request
  ): Promise<IntegrationSettings[]> {
    const args = plainToClass(IntegrationSettingsFindManyArgs, request.query);
    return this.service.integrationSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IntegrationSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async integrationSettings(
    @common.Param() params: IntegrationSettingsWhereUniqueInput
  ): Promise<IntegrationSettings | null> {
    const result = await this.service.integrationSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IntegrationSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIntegrationSettings(
    @common.Param() params: IntegrationSettingsWhereUniqueInput,
    @common.Body() data: IntegrationSettingsUpdateInput
  ): Promise<IntegrationSettings | null> {
    try {
      return await this.service.updateIntegrationSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IntegrationSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIntegrationSettings(
    @common.Param() params: IntegrationSettingsWhereUniqueInput
  ): Promise<IntegrationSettings | null> {
    try {
      return await this.service.deleteIntegrationSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
