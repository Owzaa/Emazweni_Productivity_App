/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UniversalSearchService } from "../universalSearch.service";
import { UniversalSearchCreateInput } from "./UniversalSearchCreateInput";
import { UniversalSearch } from "./UniversalSearch";
import { UniversalSearchFindManyArgs } from "./UniversalSearchFindManyArgs";
import { UniversalSearchWhereUniqueInput } from "./UniversalSearchWhereUniqueInput";
import { UniversalSearchUpdateInput } from "./UniversalSearchUpdateInput";

export class UniversalSearchControllerBase {
  constructor(protected readonly service: UniversalSearchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UniversalSearch })
  async createUniversalSearch(
    @common.Body() data: UniversalSearchCreateInput
  ): Promise<UniversalSearch> {
    return await this.service.createUniversalSearch({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UniversalSearch] })
  @ApiNestedQuery(UniversalSearchFindManyArgs)
  async universalSearches(
    @common.Req() request: Request
  ): Promise<UniversalSearch[]> {
    const args = plainToClass(UniversalSearchFindManyArgs, request.query);
    return this.service.universalSearches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UniversalSearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async universalSearch(
    @common.Param() params: UniversalSearchWhereUniqueInput
  ): Promise<UniversalSearch | null> {
    const result = await this.service.universalSearch({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UniversalSearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUniversalSearch(
    @common.Param() params: UniversalSearchWhereUniqueInput,
    @common.Body() data: UniversalSearchUpdateInput
  ): Promise<UniversalSearch | null> {
    try {
      return await this.service.updateUniversalSearch({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UniversalSearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUniversalSearch(
    @common.Param() params: UniversalSearchWhereUniqueInput
  ): Promise<UniversalSearch | null> {
    try {
      return await this.service.deleteUniversalSearch({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
