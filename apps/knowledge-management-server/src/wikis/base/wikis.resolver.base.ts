/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Wikis } from "./Wikis";
import { WikisCountArgs } from "./WikisCountArgs";
import { WikisFindManyArgs } from "./WikisFindManyArgs";
import { WikisFindUniqueArgs } from "./WikisFindUniqueArgs";
import { DeleteWikisArgs } from "./DeleteWikisArgs";
import { WikisService } from "../wikis.service";
@graphql.Resolver(() => Wikis)
export class WikisResolverBase {
  constructor(protected readonly service: WikisService) {}

  async _wikisItemsMeta(
    @graphql.Args() args: WikisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Wikis])
  async wikisItems(@graphql.Args() args: WikisFindManyArgs): Promise<Wikis[]> {
    return this.service.wikisItems(args);
  }

  @graphql.Query(() => Wikis, { nullable: true })
  async wikis(
    @graphql.Args() args: WikisFindUniqueArgs
  ): Promise<Wikis | null> {
    const result = await this.service.wikis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Wikis)
  async deleteWikis(
    @graphql.Args() args: DeleteWikisArgs
  ): Promise<Wikis | null> {
    try {
      return await this.service.deleteWikis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
