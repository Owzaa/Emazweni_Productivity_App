/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WikisService } from "../wikis.service";
import { WikisCreateInput } from "./WikisCreateInput";
import { Wikis } from "./Wikis";
import { WikisFindManyArgs } from "./WikisFindManyArgs";
import { WikisWhereUniqueInput } from "./WikisWhereUniqueInput";
import { WikisUpdateInput } from "./WikisUpdateInput";

export class WikisControllerBase {
  constructor(protected readonly service: WikisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wikis })
  async createWikis(@common.Body() data: WikisCreateInput): Promise<Wikis> {
    return await this.service.createWikis({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Wikis] })
  @ApiNestedQuery(WikisFindManyArgs)
  async wikisItems(@common.Req() request: Request): Promise<Wikis[]> {
    const args = plainToClass(WikisFindManyArgs, request.query);
    return this.service.wikisItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wikis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wikis(
    @common.Param() params: WikisWhereUniqueInput
  ): Promise<Wikis | null> {
    const result = await this.service.wikis({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wikis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWikis(
    @common.Param() params: WikisWhereUniqueInput,
    @common.Body() data: WikisUpdateInput
  ): Promise<Wikis | null> {
    try {
      return await this.service.updateWikis({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wikis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWikis(
    @common.Param() params: WikisWhereUniqueInput
  ): Promise<Wikis | null> {
    try {
      return await this.service.deleteWikis({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
