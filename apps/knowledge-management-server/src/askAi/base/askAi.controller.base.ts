/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AskAiService } from "../askAi.service";
import { AskAiCreateInput } from "./AskAiCreateInput";
import { AskAi } from "./AskAi";
import { AskAiFindManyArgs } from "./AskAiFindManyArgs";
import { AskAiWhereUniqueInput } from "./AskAiWhereUniqueInput";
import { AskAiUpdateInput } from "./AskAiUpdateInput";

export class AskAiControllerBase {
  constructor(protected readonly service: AskAiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AskAi })
  async createAskAi(@common.Body() data: AskAiCreateInput): Promise<AskAi> {
    return await this.service.createAskAi({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AskAi] })
  @ApiNestedQuery(AskAiFindManyArgs)
  async askAis(@common.Req() request: Request): Promise<AskAi[]> {
    const args = plainToClass(AskAiFindManyArgs, request.query);
    return this.service.askAis({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AskAi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async askAi(
    @common.Param() params: AskAiWhereUniqueInput
  ): Promise<AskAi | null> {
    const result = await this.service.askAi({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AskAi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAskAi(
    @common.Param() params: AskAiWhereUniqueInput,
    @common.Body() data: AskAiUpdateInput
  ): Promise<AskAi | null> {
    try {
      return await this.service.updateAskAi({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AskAi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAskAi(
    @common.Param() params: AskAiWhereUniqueInput
  ): Promise<AskAi | null> {
    try {
      return await this.service.deleteAskAi({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
