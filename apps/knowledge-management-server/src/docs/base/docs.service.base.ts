/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Docs as PrismaDocs } from "@prisma/client";

export class DocsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DocsCountArgs, "select">): Promise<number> {
    return this.prisma.docs.count(args);
  }

  async docsItems<T extends Prisma.DocsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocsFindManyArgs>
  ): Promise<PrismaDocs[]> {
    return this.prisma.docs.findMany<Prisma.DocsFindManyArgs>(args);
  }
  async docs<T extends Prisma.DocsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocsFindUniqueArgs>
  ): Promise<PrismaDocs | null> {
    return this.prisma.docs.findUnique(args);
  }
  async createDocs<T extends Prisma.DocsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocsCreateArgs>
  ): Promise<PrismaDocs> {
    return this.prisma.docs.create<T>(args);
  }
  async updateDocs<T extends Prisma.DocsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocsUpdateArgs>
  ): Promise<PrismaDocs> {
    return this.prisma.docs.update<T>(args);
  }
  async deleteDocs<T extends Prisma.DocsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocsDeleteArgs>
  ): Promise<PrismaDocs> {
    return this.prisma.docs.delete(args);
  }
}
