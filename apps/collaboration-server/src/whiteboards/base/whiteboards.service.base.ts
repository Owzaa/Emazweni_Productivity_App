/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Whiteboards as PrismaWhiteboards } from "@prisma/client";

export class WhiteboardsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WhiteboardsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.whiteboards.count(args);
  }

  async whiteboardsItems<T extends Prisma.WhiteboardsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhiteboardsFindManyArgs>
  ): Promise<PrismaWhiteboards[]> {
    return this.prisma.whiteboards.findMany<Prisma.WhiteboardsFindManyArgs>(
      args
    );
  }
  async whiteboards<T extends Prisma.WhiteboardsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhiteboardsFindUniqueArgs>
  ): Promise<PrismaWhiteboards | null> {
    return this.prisma.whiteboards.findUnique(args);
  }
  async createWhiteboards<T extends Prisma.WhiteboardsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhiteboardsCreateArgs>
  ): Promise<PrismaWhiteboards> {
    return this.prisma.whiteboards.create<T>(args);
  }
  async updateWhiteboards<T extends Prisma.WhiteboardsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhiteboardsUpdateArgs>
  ): Promise<PrismaWhiteboards> {
    return this.prisma.whiteboards.update<T>(args);
  }
  async deleteWhiteboards<T extends Prisma.WhiteboardsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhiteboardsDeleteArgs>
  ): Promise<PrismaWhiteboards> {
    return this.prisma.whiteboards.delete(args);
  }
}
