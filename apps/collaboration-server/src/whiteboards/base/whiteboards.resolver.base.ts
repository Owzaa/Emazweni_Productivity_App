/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Whiteboards } from "./Whiteboards";
import { WhiteboardsCountArgs } from "./WhiteboardsCountArgs";
import { WhiteboardsFindManyArgs } from "./WhiteboardsFindManyArgs";
import { WhiteboardsFindUniqueArgs } from "./WhiteboardsFindUniqueArgs";
import { DeleteWhiteboardsArgs } from "./DeleteWhiteboardsArgs";
import { WhiteboardsService } from "../whiteboards.service";
@graphql.Resolver(() => Whiteboards)
export class WhiteboardsResolverBase {
  constructor(protected readonly service: WhiteboardsService) {}

  async _whiteboardsItemsMeta(
    @graphql.Args() args: WhiteboardsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Whiteboards])
  async whiteboardsItems(
    @graphql.Args() args: WhiteboardsFindManyArgs
  ): Promise<Whiteboards[]> {
    return this.service.whiteboardsItems(args);
  }

  @graphql.Query(() => Whiteboards, { nullable: true })
  async whiteboards(
    @graphql.Args() args: WhiteboardsFindUniqueArgs
  ): Promise<Whiteboards | null> {
    const result = await this.service.whiteboards(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Whiteboards)
  async deleteWhiteboards(
    @graphql.Args() args: DeleteWhiteboardsArgs
  ): Promise<Whiteboards | null> {
    try {
      return await this.service.deleteWhiteboards(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
