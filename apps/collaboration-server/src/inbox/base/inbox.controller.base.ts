/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InboxService } from "../inbox.service";
import { InboxCreateInput } from "./InboxCreateInput";
import { Inbox } from "./Inbox";
import { InboxFindManyArgs } from "./InboxFindManyArgs";
import { InboxWhereUniqueInput } from "./InboxWhereUniqueInput";
import { InboxUpdateInput } from "./InboxUpdateInput";

export class InboxControllerBase {
  constructor(protected readonly service: InboxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Inbox })
  async createInbox(@common.Body() data: InboxCreateInput): Promise<Inbox> {
    return await this.service.createInbox({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Inbox] })
  @ApiNestedQuery(InboxFindManyArgs)
  async inboxes(@common.Req() request: Request): Promise<Inbox[]> {
    const args = plainToClass(InboxFindManyArgs, request.query);
    return this.service.inboxes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Inbox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inbox(
    @common.Param() params: InboxWhereUniqueInput
  ): Promise<Inbox | null> {
    const result = await this.service.inbox({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Inbox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInbox(
    @common.Param() params: InboxWhereUniqueInput,
    @common.Body() data: InboxUpdateInput
  ): Promise<Inbox | null> {
    try {
      return await this.service.updateInbox({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Inbox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInbox(
    @common.Param() params: InboxWhereUniqueInput
  ): Promise<Inbox | null> {
    try {
      return await this.service.deleteInbox({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
