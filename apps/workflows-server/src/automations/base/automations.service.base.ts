/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Automations as PrismaAutomations } from "@prisma/client";

export class AutomationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AutomationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.automations.count(args);
  }

  async automationsItems<T extends Prisma.AutomationsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationsFindManyArgs>
  ): Promise<PrismaAutomations[]> {
    return this.prisma.automations.findMany<Prisma.AutomationsFindManyArgs>(
      args
    );
  }
  async automations<T extends Prisma.AutomationsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationsFindUniqueArgs>
  ): Promise<PrismaAutomations | null> {
    return this.prisma.automations.findUnique(args);
  }
  async createAutomations<T extends Prisma.AutomationsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationsCreateArgs>
  ): Promise<PrismaAutomations> {
    return this.prisma.automations.create<T>(args);
  }
  async updateAutomations<T extends Prisma.AutomationsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationsUpdateArgs>
  ): Promise<PrismaAutomations> {
    return this.prisma.automations.update<T>(args);
  }
  async deleteAutomations<T extends Prisma.AutomationsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationsDeleteArgs>
  ): Promise<PrismaAutomations> {
    return this.prisma.automations.delete(args);
  }
}
