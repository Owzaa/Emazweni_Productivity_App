/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomFields } from "./CustomFields";
import { CustomFieldsCountArgs } from "./CustomFieldsCountArgs";
import { CustomFieldsFindManyArgs } from "./CustomFieldsFindManyArgs";
import { CustomFieldsFindUniqueArgs } from "./CustomFieldsFindUniqueArgs";
import { DeleteCustomFieldsArgs } from "./DeleteCustomFieldsArgs";
import { CustomFieldsService } from "../customFields.service";
@graphql.Resolver(() => CustomFields)
export class CustomFieldsResolverBase {
  constructor(protected readonly service: CustomFieldsService) {}

  async _customFieldsItemsMeta(
    @graphql.Args() args: CustomFieldsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomFields])
  async customFieldsItems(
    @graphql.Args() args: CustomFieldsFindManyArgs
  ): Promise<CustomFields[]> {
    return this.service.customFieldsItems(args);
  }

  @graphql.Query(() => CustomFields, { nullable: true })
  async customFields(
    @graphql.Args() args: CustomFieldsFindUniqueArgs
  ): Promise<CustomFields | null> {
    const result = await this.service.customFields(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomFields)
  async deleteCustomFields(
    @graphql.Args() args: DeleteCustomFieldsArgs
  ): Promise<CustomFields | null> {
    try {
      return await this.service.deleteCustomFields(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
