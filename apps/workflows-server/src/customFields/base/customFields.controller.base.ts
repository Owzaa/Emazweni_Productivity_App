/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomFieldsService } from "../customFields.service";
import { CustomFieldsCreateInput } from "./CustomFieldsCreateInput";
import { CustomFields } from "./CustomFields";
import { CustomFieldsFindManyArgs } from "./CustomFieldsFindManyArgs";
import { CustomFieldsWhereUniqueInput } from "./CustomFieldsWhereUniqueInput";
import { CustomFieldsUpdateInput } from "./CustomFieldsUpdateInput";

export class CustomFieldsControllerBase {
  constructor(protected readonly service: CustomFieldsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomFields })
  async createCustomFields(
    @common.Body() data: CustomFieldsCreateInput
  ): Promise<CustomFields> {
    return await this.service.createCustomFields({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomFields] })
  @ApiNestedQuery(CustomFieldsFindManyArgs)
  async customFieldsItems(
    @common.Req() request: Request
  ): Promise<CustomFields[]> {
    const args = plainToClass(CustomFieldsFindManyArgs, request.query);
    return this.service.customFieldsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomFields })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customFields(
    @common.Param() params: CustomFieldsWhereUniqueInput
  ): Promise<CustomFields | null> {
    const result = await this.service.customFields({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomFields })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomFields(
    @common.Param() params: CustomFieldsWhereUniqueInput,
    @common.Body() data: CustomFieldsUpdateInput
  ): Promise<CustomFields | null> {
    try {
      return await this.service.updateCustomFields({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomFields })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomFields(
    @common.Param() params: CustomFieldsWhereUniqueInput
  ): Promise<CustomFields | null> {
    try {
      return await this.service.deleteCustomFields({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
