/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Forms as PrismaForms } from "@prisma/client";

export class FormsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FormsCountArgs, "select">): Promise<number> {
    return this.prisma.forms.count(args);
  }

  async formsItems<T extends Prisma.FormsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormsFindManyArgs>
  ): Promise<PrismaForms[]> {
    return this.prisma.forms.findMany<Prisma.FormsFindManyArgs>(args);
  }
  async forms<T extends Prisma.FormsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormsFindUniqueArgs>
  ): Promise<PrismaForms | null> {
    return this.prisma.forms.findUnique(args);
  }
  async createForms<T extends Prisma.FormsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormsCreateArgs>
  ): Promise<PrismaForms> {
    return this.prisma.forms.create<T>(args);
  }
  async updateForms<T extends Prisma.FormsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormsUpdateArgs>
  ): Promise<PrismaForms> {
    return this.prisma.forms.update<T>(args);
  }
  async deleteForms<T extends Prisma.FormsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormsDeleteArgs>
  ): Promise<PrismaForms> {
    return this.prisma.forms.delete(args);
  }
}
