/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardsService } from "../dashboards.service";
import { DashboardsCreateInput } from "./DashboardsCreateInput";
import { Dashboards } from "./Dashboards";
import { DashboardsFindManyArgs } from "./DashboardsFindManyArgs";
import { DashboardsWhereUniqueInput } from "./DashboardsWhereUniqueInput";
import { DashboardsUpdateInput } from "./DashboardsUpdateInput";

export class DashboardsControllerBase {
  constructor(protected readonly service: DashboardsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dashboards })
  async createDashboards(
    @common.Body() data: DashboardsCreateInput
  ): Promise<Dashboards> {
    return await this.service.createDashboards({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dashboards] })
  @ApiNestedQuery(DashboardsFindManyArgs)
  async dashboardsItems(@common.Req() request: Request): Promise<Dashboards[]> {
    const args = plainToClass(DashboardsFindManyArgs, request.query);
    return this.service.dashboardsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dashboards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboards(
    @common.Param() params: DashboardsWhereUniqueInput
  ): Promise<Dashboards | null> {
    const result = await this.service.dashboards({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dashboards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboards(
    @common.Param() params: DashboardsWhereUniqueInput,
    @common.Body() data: DashboardsUpdateInput
  ): Promise<Dashboards | null> {
    try {
      return await this.service.updateDashboards({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dashboards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboards(
    @common.Param() params: DashboardsWhereUniqueInput
  ): Promise<Dashboards | null> {
    try {
      return await this.service.deleteDashboards({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
