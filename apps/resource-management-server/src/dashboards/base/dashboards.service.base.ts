/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dashboards as PrismaDashboards } from "@prisma/client";

export class DashboardsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboards.count(args);
  }

  async dashboardsItems<T extends Prisma.DashboardsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsFindManyArgs>
  ): Promise<PrismaDashboards[]> {
    return this.prisma.dashboards.findMany<Prisma.DashboardsFindManyArgs>(args);
  }
  async dashboards<T extends Prisma.DashboardsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsFindUniqueArgs>
  ): Promise<PrismaDashboards | null> {
    return this.prisma.dashboards.findUnique(args);
  }
  async createDashboards<T extends Prisma.DashboardsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsCreateArgs>
  ): Promise<PrismaDashboards> {
    return this.prisma.dashboards.create<T>(args);
  }
  async updateDashboards<T extends Prisma.DashboardsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsUpdateArgs>
  ): Promise<PrismaDashboards> {
    return this.prisma.dashboards.update<T>(args);
  }
  async deleteDashboards<T extends Prisma.DashboardsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsDeleteArgs>
  ): Promise<PrismaDashboards> {
    return this.prisma.dashboards.delete(args);
  }
}
