/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dashboards } from "./Dashboards";
import { DashboardsCountArgs } from "./DashboardsCountArgs";
import { DashboardsFindManyArgs } from "./DashboardsFindManyArgs";
import { DashboardsFindUniqueArgs } from "./DashboardsFindUniqueArgs";
import { DeleteDashboardsArgs } from "./DeleteDashboardsArgs";
import { DashboardsService } from "../dashboards.service";
@graphql.Resolver(() => Dashboards)
export class DashboardsResolverBase {
  constructor(protected readonly service: DashboardsService) {}

  async _dashboardsItemsMeta(
    @graphql.Args() args: DashboardsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dashboards])
  async dashboardsItems(
    @graphql.Args() args: DashboardsFindManyArgs
  ): Promise<Dashboards[]> {
    return this.service.dashboardsItems(args);
  }

  @graphql.Query(() => Dashboards, { nullable: true })
  async dashboards(
    @graphql.Args() args: DashboardsFindUniqueArgs
  ): Promise<Dashboards | null> {
    const result = await this.service.dashboards(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dashboards)
  async deleteDashboards(
    @graphql.Args() args: DeleteDashboardsArgs
  ): Promise<Dashboards | null> {
    try {
      return await this.service.deleteDashboards(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
