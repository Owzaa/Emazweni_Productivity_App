/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TimeTracking as PrismaTimeTracking } from "@prisma/client";

export class TimeTrackingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimeTrackingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timeTracking.count(args);
  }

  async timeTrackings<T extends Prisma.TimeTrackingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeTrackingFindManyArgs>
  ): Promise<PrismaTimeTracking[]> {
    return this.prisma.timeTracking.findMany<Prisma.TimeTrackingFindManyArgs>(
      args
    );
  }
  async timeTracking<T extends Prisma.TimeTrackingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeTrackingFindUniqueArgs>
  ): Promise<PrismaTimeTracking | null> {
    return this.prisma.timeTracking.findUnique(args);
  }
  async createTimeTracking<T extends Prisma.TimeTrackingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeTrackingCreateArgs>
  ): Promise<PrismaTimeTracking> {
    return this.prisma.timeTracking.create<T>(args);
  }
  async updateTimeTracking<T extends Prisma.TimeTrackingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeTrackingUpdateArgs>
  ): Promise<PrismaTimeTracking> {
    return this.prisma.timeTracking.update<T>(args);
  }
  async deleteTimeTracking<T extends Prisma.TimeTrackingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeTrackingDeleteArgs>
  ): Promise<PrismaTimeTracking> {
    return this.prisma.timeTracking.delete(args);
  }
}
