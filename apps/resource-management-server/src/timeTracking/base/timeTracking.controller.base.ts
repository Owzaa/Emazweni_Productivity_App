/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeTrackingService } from "../timeTracking.service";
import { TimeTrackingCreateInput } from "./TimeTrackingCreateInput";
import { TimeTracking } from "./TimeTracking";
import { TimeTrackingFindManyArgs } from "./TimeTrackingFindManyArgs";
import { TimeTrackingWhereUniqueInput } from "./TimeTrackingWhereUniqueInput";
import { TimeTrackingUpdateInput } from "./TimeTrackingUpdateInput";

export class TimeTrackingControllerBase {
  constructor(protected readonly service: TimeTrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeTracking })
  async createTimeTracking(
    @common.Body() data: TimeTrackingCreateInput
  ): Promise<TimeTracking> {
    return await this.service.createTimeTracking({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeTracking] })
  @ApiNestedQuery(TimeTrackingFindManyArgs)
  async timeTrackings(@common.Req() request: Request): Promise<TimeTracking[]> {
    const args = plainToClass(TimeTrackingFindManyArgs, request.query);
    return this.service.timeTrackings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async timeTracking(
    @common.Param() params: TimeTrackingWhereUniqueInput
  ): Promise<TimeTracking | null> {
    const result = await this.service.timeTracking({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTimeTracking(
    @common.Param() params: TimeTrackingWhereUniqueInput,
    @common.Body() data: TimeTrackingUpdateInput
  ): Promise<TimeTracking | null> {
    try {
      return await this.service.updateTimeTracking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTimeTracking(
    @common.Param() params: TimeTrackingWhereUniqueInput
  ): Promise<TimeTracking | null> {
    try {
      return await this.service.deleteTimeTracking({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
