/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GoalsService } from "../goals.service";
import { GoalsCreateInput } from "./GoalsCreateInput";
import { Goals } from "./Goals";
import { GoalsFindManyArgs } from "./GoalsFindManyArgs";
import { GoalsWhereUniqueInput } from "./GoalsWhereUniqueInput";
import { GoalsUpdateInput } from "./GoalsUpdateInput";

export class GoalsControllerBase {
  constructor(protected readonly service: GoalsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Goals })
  async createGoals(@common.Body() data: GoalsCreateInput): Promise<Goals> {
    return await this.service.createGoals({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Goals] })
  @ApiNestedQuery(GoalsFindManyArgs)
  async goalsItems(@common.Req() request: Request): Promise<Goals[]> {
    const args = plainToClass(GoalsFindManyArgs, request.query);
    return this.service.goalsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Goals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async goals(
    @common.Param() params: GoalsWhereUniqueInput
  ): Promise<Goals | null> {
    const result = await this.service.goals({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Goals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGoals(
    @common.Param() params: GoalsWhereUniqueInput,
    @common.Body() data: GoalsUpdateInput
  ): Promise<Goals | null> {
    try {
      return await this.service.updateGoals({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Goals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGoals(
    @common.Param() params: GoalsWhereUniqueInput
  ): Promise<Goals | null> {
    try {
      return await this.service.deleteGoals({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
