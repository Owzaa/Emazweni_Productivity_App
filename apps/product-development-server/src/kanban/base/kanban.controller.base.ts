/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KanbanService } from "../kanban.service";
import { KanbanCreateInput } from "./KanbanCreateInput";
import { Kanban } from "./Kanban";
import { KanbanFindManyArgs } from "./KanbanFindManyArgs";
import { KanbanWhereUniqueInput } from "./KanbanWhereUniqueInput";
import { KanbanUpdateInput } from "./KanbanUpdateInput";

export class KanbanControllerBase {
  constructor(protected readonly service: KanbanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Kanban })
  async createKanban(@common.Body() data: KanbanCreateInput): Promise<Kanban> {
    return await this.service.createKanban({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Kanban] })
  @ApiNestedQuery(KanbanFindManyArgs)
  async kanbans(@common.Req() request: Request): Promise<Kanban[]> {
    const args = plainToClass(KanbanFindManyArgs, request.query);
    return this.service.kanbans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Kanban })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kanban(
    @common.Param() params: KanbanWhereUniqueInput
  ): Promise<Kanban | null> {
    const result = await this.service.kanban({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Kanban })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKanban(
    @common.Param() params: KanbanWhereUniqueInput,
    @common.Body() data: KanbanUpdateInput
  ): Promise<Kanban | null> {
    try {
      return await this.service.updateKanban({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Kanban })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKanban(
    @common.Param() params: KanbanWhereUniqueInput
  ): Promise<Kanban | null> {
    try {
      return await this.service.deleteKanban({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
