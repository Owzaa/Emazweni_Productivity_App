/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SprintReports as PrismaSprintReports } from "@prisma/client";

export class SprintReportsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SprintReportsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sprintReports.count(args);
  }

  async sprintReportsItems<T extends Prisma.SprintReportsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SprintReportsFindManyArgs>
  ): Promise<PrismaSprintReports[]> {
    return this.prisma.sprintReports.findMany<Prisma.SprintReportsFindManyArgs>(
      args
    );
  }
  async sprintReports<T extends Prisma.SprintReportsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SprintReportsFindUniqueArgs>
  ): Promise<PrismaSprintReports | null> {
    return this.prisma.sprintReports.findUnique(args);
  }
  async createSprintReports<T extends Prisma.SprintReportsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SprintReportsCreateArgs>
  ): Promise<PrismaSprintReports> {
    return this.prisma.sprintReports.create<T>(args);
  }
  async updateSprintReports<T extends Prisma.SprintReportsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SprintReportsUpdateArgs>
  ): Promise<PrismaSprintReports> {
    return this.prisma.sprintReports.update<T>(args);
  }
  async deleteSprintReports<T extends Prisma.SprintReportsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SprintReportsDeleteArgs>
  ): Promise<PrismaSprintReports> {
    return this.prisma.sprintReports.delete(args);
  }
}
