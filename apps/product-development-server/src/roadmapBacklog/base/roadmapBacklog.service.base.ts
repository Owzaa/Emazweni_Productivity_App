/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RoadmapBacklog as PrismaRoadmapBacklog } from "@prisma/client";

export class RoadmapBacklogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoadmapBacklogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.roadmapBacklog.count(args);
  }

  async roadmapBacklogs<T extends Prisma.RoadmapBacklogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapBacklogFindManyArgs>
  ): Promise<PrismaRoadmapBacklog[]> {
    return this.prisma.roadmapBacklog.findMany<Prisma.RoadmapBacklogFindManyArgs>(
      args
    );
  }
  async roadmapBacklog<T extends Prisma.RoadmapBacklogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapBacklogFindUniqueArgs>
  ): Promise<PrismaRoadmapBacklog | null> {
    return this.prisma.roadmapBacklog.findUnique(args);
  }
  async createRoadmapBacklog<T extends Prisma.RoadmapBacklogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapBacklogCreateArgs>
  ): Promise<PrismaRoadmapBacklog> {
    return this.prisma.roadmapBacklog.create<T>(args);
  }
  async updateRoadmapBacklog<T extends Prisma.RoadmapBacklogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapBacklogUpdateArgs>
  ): Promise<PrismaRoadmapBacklog> {
    return this.prisma.roadmapBacklog.update<T>(args);
  }
  async deleteRoadmapBacklog<T extends Prisma.RoadmapBacklogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapBacklogDeleteArgs>
  ): Promise<PrismaRoadmapBacklog> {
    return this.prisma.roadmapBacklog.delete(args);
  }
}
