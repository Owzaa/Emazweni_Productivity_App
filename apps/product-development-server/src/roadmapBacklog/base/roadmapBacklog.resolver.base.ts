/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RoadmapBacklog } from "./RoadmapBacklog";
import { RoadmapBacklogCountArgs } from "./RoadmapBacklogCountArgs";
import { RoadmapBacklogFindManyArgs } from "./RoadmapBacklogFindManyArgs";
import { RoadmapBacklogFindUniqueArgs } from "./RoadmapBacklogFindUniqueArgs";
import { DeleteRoadmapBacklogArgs } from "./DeleteRoadmapBacklogArgs";
import { RoadmapBacklogService } from "../roadmapBacklog.service";
@graphql.Resolver(() => RoadmapBacklog)
export class RoadmapBacklogResolverBase {
  constructor(protected readonly service: RoadmapBacklogService) {}

  async _roadmapBacklogsMeta(
    @graphql.Args() args: RoadmapBacklogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RoadmapBacklog])
  async roadmapBacklogs(
    @graphql.Args() args: RoadmapBacklogFindManyArgs
  ): Promise<RoadmapBacklog[]> {
    return this.service.roadmapBacklogs(args);
  }

  @graphql.Query(() => RoadmapBacklog, { nullable: true })
  async roadmapBacklog(
    @graphql.Args() args: RoadmapBacklogFindUniqueArgs
  ): Promise<RoadmapBacklog | null> {
    const result = await this.service.roadmapBacklog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoadmapBacklog)
  async deleteRoadmapBacklog(
    @graphql.Args() args: DeleteRoadmapBacklogArgs
  ): Promise<RoadmapBacklog | null> {
    try {
      return await this.service.deleteRoadmapBacklog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
