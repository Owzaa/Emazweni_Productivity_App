/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Tasks as PrismaTasks } from "@prisma/client";

export class TasksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TasksCountArgs, "select">): Promise<number> {
    return this.prisma.tasks.count(args);
  }

  async tasksItems<T extends Prisma.TasksFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TasksFindManyArgs>
  ): Promise<PrismaTasks[]> {
    return this.prisma.tasks.findMany<Prisma.TasksFindManyArgs>(args);
  }
  async tasks<T extends Prisma.TasksFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TasksFindUniqueArgs>
  ): Promise<PrismaTasks | null> {
    return this.prisma.tasks.findUnique(args);
  }
  async createTasks<T extends Prisma.TasksCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TasksCreateArgs>
  ): Promise<PrismaTasks> {
    return this.prisma.tasks.create<T>(args);
  }
  async updateTasks<T extends Prisma.TasksUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TasksUpdateArgs>
  ): Promise<PrismaTasks> {
    return this.prisma.tasks.update<T>(args);
  }
  async deleteTasks<T extends Prisma.TasksDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TasksDeleteArgs>
  ): Promise<PrismaTasks> {
    return this.prisma.tasks.delete(args);
  }
}
