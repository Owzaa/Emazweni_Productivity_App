/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GanttCharts as PrismaGanttCharts } from "@prisma/client";

export class GanttChartsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GanttChartsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ganttCharts.count(args);
  }

  async ganttChartsItems<T extends Prisma.GanttChartsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GanttChartsFindManyArgs>
  ): Promise<PrismaGanttCharts[]> {
    return this.prisma.ganttCharts.findMany<Prisma.GanttChartsFindManyArgs>(
      args
    );
  }
  async ganttCharts<T extends Prisma.GanttChartsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GanttChartsFindUniqueArgs>
  ): Promise<PrismaGanttCharts | null> {
    return this.prisma.ganttCharts.findUnique(args);
  }
  async createGanttCharts<T extends Prisma.GanttChartsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GanttChartsCreateArgs>
  ): Promise<PrismaGanttCharts> {
    return this.prisma.ganttCharts.create<T>(args);
  }
  async updateGanttCharts<T extends Prisma.GanttChartsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GanttChartsUpdateArgs>
  ): Promise<PrismaGanttCharts> {
    return this.prisma.ganttCharts.update<T>(args);
  }
  async deleteGanttCharts<T extends Prisma.GanttChartsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GanttChartsDeleteArgs>
  ): Promise<PrismaGanttCharts> {
    return this.prisma.ganttCharts.delete(args);
  }
}
