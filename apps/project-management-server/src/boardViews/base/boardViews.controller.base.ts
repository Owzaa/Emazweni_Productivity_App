/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoardViewsService } from "../boardViews.service";
import { BoardViewsCreateInput } from "./BoardViewsCreateInput";
import { BoardViews } from "./BoardViews";
import { BoardViewsFindManyArgs } from "./BoardViewsFindManyArgs";
import { BoardViewsWhereUniqueInput } from "./BoardViewsWhereUniqueInput";
import { BoardViewsUpdateInput } from "./BoardViewsUpdateInput";

export class BoardViewsControllerBase {
  constructor(protected readonly service: BoardViewsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BoardViews })
  async createBoardViews(
    @common.Body() data: BoardViewsCreateInput
  ): Promise<BoardViews> {
    return await this.service.createBoardViews({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BoardViews] })
  @ApiNestedQuery(BoardViewsFindManyArgs)
  async boardViewsItems(@common.Req() request: Request): Promise<BoardViews[]> {
    const args = plainToClass(BoardViewsFindManyArgs, request.query);
    return this.service.boardViewsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BoardViews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boardViews(
    @common.Param() params: BoardViewsWhereUniqueInput
  ): Promise<BoardViews | null> {
    const result = await this.service.boardViews({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BoardViews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoardViews(
    @common.Param() params: BoardViewsWhereUniqueInput,
    @common.Body() data: BoardViewsUpdateInput
  ): Promise<BoardViews | null> {
    try {
      return await this.service.updateBoardViews({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BoardViews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoardViews(
    @common.Param() params: BoardViewsWhereUniqueInput
  ): Promise<BoardViews | null> {
    try {
      return await this.service.deleteBoardViews({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
