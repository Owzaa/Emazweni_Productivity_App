/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BoardViews as PrismaBoardViews } from "@prisma/client";

export class BoardViewsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BoardViewsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.boardViews.count(args);
  }

  async boardViewsItems<T extends Prisma.BoardViewsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardViewsFindManyArgs>
  ): Promise<PrismaBoardViews[]> {
    return this.prisma.boardViews.findMany<Prisma.BoardViewsFindManyArgs>(args);
  }
  async boardViews<T extends Prisma.BoardViewsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardViewsFindUniqueArgs>
  ): Promise<PrismaBoardViews | null> {
    return this.prisma.boardViews.findUnique(args);
  }
  async createBoardViews<T extends Prisma.BoardViewsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardViewsCreateArgs>
  ): Promise<PrismaBoardViews> {
    return this.prisma.boardViews.create<T>(args);
  }
  async updateBoardViews<T extends Prisma.BoardViewsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardViewsUpdateArgs>
  ): Promise<PrismaBoardViews> {
    return this.prisma.boardViews.update<T>(args);
  }
  async deleteBoardViews<T extends Prisma.BoardViewsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardViewsDeleteArgs>
  ): Promise<PrismaBoardViews> {
    return this.prisma.boardViews.delete(args);
  }
}
